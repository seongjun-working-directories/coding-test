'''
[문제 048]
9X9 스도쿠 보드를 다 채워 완성된 스도쿠 보드를 반환하는 solution() 함수를 작성하세요.
해는 유일하지 않을 수 있습니다.
스돜누의 조건에 맞다면 맞는 해라고 생각하면 됩니다.
스도쿠의 규칙은 다음과 같습니다.

- 가로줄, 세로줄에는 1부터 9까지의 숫자가 한 번씩 나타나야 합니다.
- 9X9 보드를 채울 9개의 작은 박스(3X3 크기)에도 1부터 9까지의 숫자가 한 번씩 나타나야 합니다.

[제약조건]
- 문제에 주어지는 board 중 스도쿠를 완성하지 못하는 board는 없다고 가정합니다.
  예를 들어, 특정 행이나 열에 같은 숫자가 있는 경우는 없습니다.

[입출력 예]
board                                   result
[                                       [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],            [5, 3, 4, 6, 7, 8, 9, 1, 2],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],            [6, 7, 2, 1, 9, 5, 3, 4, 8],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],            [1, 9, 8, 3, 4, 2, 5, 6, 7],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],            [8, 5, 9, 7, 6, 1, 4, 2, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],            [4, 2, 6, 8, 5, 3, 7, 9, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],            [7, 1, 3, 9, 2, 4, 8, 5, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],            [9, 6, 1, 5, 3, 7, 2, 8, 4],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],            [2, 8, 7, 4, 1, 9, 6, 3, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],            [3, 4, 5, 2, 8, 6, 1, 7, 9],
]                                       ]

[                                       [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [1, 2, 3, 4, 5, 6, 7, 8, 9],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [4, 5, 6, 7, 8, 9, 1, 2, 3],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [7, 8, 9, 1, 2, 3, 4, 5, 6],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [2, 3, 4, 5, 6, 7, 8, 9, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [5, 6, 7, 8, 9, 1, 2, 3, 4],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [8, 9, 1, 2, 3, 4, 5, 6, 7],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [3, 4, 5, 6, 7, 8, 9, 1, 2],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [6, 7, 8, 9, 1, 2, 3, 4, 5],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],            [9, 1, 2, 3, 4, 5, 6, 7, 8],
]                                       ]
'''
def solution(board):
    def is_valid(num, row, col):
        # 가로줄 확인
        for i in range(len(board[row])):
            if (board[row][i] == num):
                return False
        
        # 세로줄 확인
        for i in range(len(board)):
            if (board[i][col] == num):
                return False
        
        # 3*3 확인
        range_row = (row//3) * 3
        range_col = (col//3) * 3
        for i in range(range_row, range_row+3):
            for j in range(range_col, range_col+3):
                if (board[i][j] == num):
                    return False

        return True
    
    def find_empty():
        for i in range(9):
            for j in range(9):
                if board[i][j] == 0:
                    return i, j
        return None
    
    def find_solution():
        empty_position = find_empty()

        if not empty_position:
            return True
        
        row, col = empty_position

        for num in range(1, 10):
            if is_valid(num, row, col):
                board[row][col] = num
                if find_solution():
                    return True
                board[row][col] = 0
        
        return False
    
    find_solution()
    return board

print(solution([
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],
    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],
    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9],
]))

print(solution([
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
]))
