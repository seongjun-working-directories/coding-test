'''
[참조]: https://wikidocs.net/196182

그래프(Graph) :
도시와 도시 사이를 연결하는 도로나 컴퓨터 네트워크 또는 사람의 인맥 관계처럼
어떤 "관계(relationships)"를 표현하는 수학 구조

도시와 도시 사이를 연결하는 도로 중에서
도시는 노드(node 또는 vertex)에 해당하고, 이들을 연결하는 도로는 간선(edge)에 해당함

정리하자면, 그래프는 노드의 집합과 간선의 집합으로 구성됨
" G = ( V, E ) "

- V : 노드의 집합
- E : 두 노드를 연결하는 간선(edges)의 집합
    - 노드 u와 v를 연결하는 간선을 e라고 하면, e = (u, v)

아래 그림과 같은 그래프를 G = (V, E) 라고 하면, V 와 E 는 다음과 같음
        1
     /  |  \
  2 --- 3 --- 5
        |  /
        4

- V = {1, 2, 3, 4, 5}
- E = {(1, 2), (1, 3), (1, 5), (2, 3), (3, 4), (3, 5), (4, 5)}

그래프의 종류 [07_Graph/assets/a무방향_b방향_c가중치.png 참조]

1. 무방향 그래프(undirected graph)
- 두 노드를 연결하는 간선에 방향이 없는 그래프
- 한 노드에서 다른 노드로 가는 것이나 그 반대로 가는 것은 완전히 같음
- (u, v) = (v, u)

2. 방향 그래프(directed graph)
- 간선에 방향이 있는 그래프(즉, 일방통행 도로와 유사)
- 방향 그래프의 간선은 < > 로 표기
- <u, v> != <v, u>

3. 가중 그래프(weighted graph)
- 노드를 연결하는 간선에 가중치(weight)를 부여한 그래프
- 간선을 (u, v, weight) 로 표현
- 단, 그래프는 무방향 그래프일 수도 있고, 방향 그래프일 수도 있음

파이썬으로 그래프 표현(인접 행렬, 인접 리스트)
* 문제에서 노드 개수가 1,000 개 미만으로 주어지는 경우에는 인접 행렬을 사용

- 인접 행렬
    - 주로 "배열"을 사용하여 구현
    - 배열의 인덱스는 노드, 배열의 값은 노드의 가중치로 설정
    - 인덱스의 세로 방향은 출발, 가로 방향은 도착으로 설정
    - 만약, 서울(0) ---(400(km))---> 부산(1) 이라면, 다음과 같이 표현
      
          |  0  |   1   <- 도착
        ---------------
        0 |  -  |  400  <- 가중치
        1 |  -  |  -
        ^
        |
        출발

- 인접 리스트
    - 적절한 "노드" 설정하여 구현
    - 이때, 노드는 "정점(v)", "가중치(w)", "다음노드(next)"를 묶어 관리해야 함
    - 인접 리스트 구현 시,
      (1) 노드 개수만큼 배열을 준비
      (2) 배열의 인덱스는 각 시작 노드를 의미하며, 배열의 값에는 다음 노드를 연결
      [07_Graph/assets/인접리스트_그래프표현.png 참조]

그래프(Graph)는 관계(relationships)를 표현하는 자료구조이고,
파이썬에서는 어떤 관계를 표현할 때 적합한 것은 딕셔너리(dictionary)임

예시) [07_Graph/assets/sample_graph_01_02.png 참조]
- 키(key): 노드
- 값(value): 키와 연결된 노드 리스트

#무방향 그래프
graph1 = {1: [2, 3, 5], 2: [1, 3], 3: [1, 2, 4], 4: [3, 5], 5: [1, 4]}

#방향 그래프
graph2 = {1: [2, 3], 2: [3], 3: [4], 4: [], 5: [1, 4]}

cf. 순환
"순환"은 특정 노드에서 시작해 간선을 따라 다시 돌아오는 경로가 있는 것을 말함
순환이 존재하면 순환 그래프(Cycle Graph), 없으면 비순환 그래프(Acyclic Graph) 라고 함
'''